name: Tests

on:
  pull_request:
    paths-ignore:
    - 'doc/**'
  push:
    branches:
    - main

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-2022]
        include:
          - os-name: linux
            os: ubuntu-20.04
          - os-name: macOS
            os: macos-latest
          - os-name: windows
            os: windows-2022
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: test (${{ matrix.os-name }})
    steps:
      - uses: actions/checkout@v3
      - name: Cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/bazel-disk-cache
          key: bazel-disk-cache-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('.bazelversion', '.bazelrc', 'WORKSPACE') }}
          # Intentionally not reusing an older cache entry using a key prefix, bazel frequently
          # ends up with a larger cache at the end when starting with an available cache entry,
          # resulting in a snowballing cache size and cache download/upload times.
      - name: Setup Linux
        if: runner.os == 'Linux'
        # Install dependencies, including clang via through LLVM APT repository. Note that this
        # will also install lldb and clangd alongside dependencies, which can be removed with
        # `sudo apt-get remove -y lldb-14 clangd-14; sudo apt-get autoremove -y` if space is
        # limited.
        # libunwind, libc++abi1 and libc++1 should be automatically installed as dependencies of
        # libc++, but this appears to cause errors so they are also being explicitly installed.
        # Since the GitHub runner image comes with a number of preinstalled packages, we don't need
        # to use APT much otherwise.
        run: |
            export DEBIAN_FRONTEND=noninteractive
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            sudo ./llvm.sh 14
            sudo apt-get install -y libunwind-14 libc++abi1-14 libc++1-14 libc++-14-dev
            echo "build:linux --action_env=CC=/usr/lib/llvm-14/bin/clang --action_env=CXX=/usr/lib/llvm-14/bin/clang++" >> .bazelrc
            echo "build:linux --host_action_env=CC=/usr/lib/llvm-14/bin/clang --host_action_env=CXX=/usr/lib/llvm-14/bin/clang++" >> .bazelrc
            sed -i -e "s%llvm-symbolizer%/usr/lib/llvm-14/bin/llvm-symbolizer%" .bazelrc
      - name: Setup macOS
        if: runner.os == 'macOS'
        # We want to symbolize stacks for crashes on CI. Xcode is currently based on LLVM 15
        # and the macos-12 image has llvm@15 installed:
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-12-Readme.md
        run: |
            export LLVM_SYMBOLIZER=$(brew --prefix llvm@15)/bin/llvm-symbolizer
            sed -i -e "s%llvm-symbolizer%${LLVM_SYMBOLIZER}%" .bazelrc
      - name: Setup Windows
        if: runner.os == 'Windows'
        # Set a custom output dir and disable generating debug information on Windows. By default,
        # bazel generates huge amounts of debug information on Windows which slows down the build
        # and takes up an excessive amount of cache space.
        run: |
            [System.IO.File]::WriteAllLines((Join-Path -Path $env:USERPROFILE -ChildPath '.bazelrc'), 'startup --output_user_root=C:/tmp')
            [System.IO.File]::WriteAllLines((Join-Path -Path $env:USERPROFILE -ChildPath '.bazelrc'), 'build:windows --config=windows_no_dbg')
            # Work around bazel clang 16 include path bug (https://github.com/bazelbuild/bazel/issues/17863)
            Move-Item -Path "C:\Program Files\LLVM\lib\clang\16" -Destination "C:\Program Files\LLVM\lib\clang\16.0.6"
      # First run a single test and quit if there is a compile error, then run all tests even if
      # some of them fail.
      # Rationale: The workerd CI tests should achieve a number of goals at once:
      #   - provide comprehensive testing of the code base
      #   - generally list all failing tests instead of just the first one
      #   - take advantage of the cache so that CI runs following small changes finish quickly
      #   - fail early when there is a compile issue to provide quick developer feedback
      # To maximize the speedup from caching, we enable the --remote_download_minimal flag, which
      # avoids building or downloading intermediate build outputs that are not needed to provide
      # the build artifacts or test outputs requested. We first run the server-test target, which
      # includes substantially the same code as the workerd binary. By not enabling --keep_going,
      # the build fails with the first compilation error. If the test result is cached, (for
      # example if only documentation is updated) no build or download steps are required.
      # Then we run every test (again skipping tests that are already cached), while using
      # --keep_going so that every failing test is reported.
      # A previous approach was to first build all tests (without --keep_going) before starting to
      # run them. This would require building or downloading every test target, even if there are
      # cached results available.
      # The present approach aims to maximize the advantage from caching while still being able to
      # find compile issues early on and otherwise listing all failing tests. This should be the
      # case unless there is a build failure within a test case (not failing early) or if
      # server-test itself fails (any other test failures will not be reported). This should only
      # affect a small proportion of test runs.
      - name: Bazel build
        # timestamps are no longer being added here, the GitHub logs include timestamps (Use
        # 'Show timestamps' on the web interface)
        run: |
            bazelisk build --remote_download_minimal --nobuild_runfile_links --jobs=12 --disk_cache=~/bazel-disk-cache --remote_cache=https://bazel:${{ secrets.BAZEL_CACHE_KEY }}@bazel-remote-cache.devprod.cloudflare.dev --remote_timeout=30 --verbose_failures //...
      - name: Bazel tests
        # Run tests and check that there are no .bazelrc issues that prevent shutdown.
        run: |
            bazelisk test --remote_download_minimal --nobuild_runfile_links --jobs=12 --disk_cache=~/bazel-disk-cache --remote_cache=https://bazel:${{ secrets.BAZEL_CACHE_KEY }}@bazel-remote-cache.devprod.cloudflare.dev --remote_timeout=30 --verbose_failures --keep_going --test_output=errors //...
            bazelisk shutdown
      - name: Report disk usage
        if: always()
        shell: bash
        run: |
            BAZEL_OUTPUT_BASE=$(bazel info --ui_event_filters=-WARNING output_base)
            BAZEL_REPOSITORY_CACHE=$(bazel info --ui_event_filters=-WARNING repository_cache)
            echo "Bazel cache usage statistics"
            du -hs -t 1 ~/bazel-disk-cache/* $BAZEL_REPOSITORY_CACHE
            echo "Bazel output usage statistics"
            du -hs -t 1 $BAZEL_OUTPUT_BASE
            echo "Workspace usage statistics"
            du -hs -t 1 $GITHUB_WORKSPACE
